from z3 import *

values = """
0019b3240445aa06
006f63394844df78
006df6a4586e71c0
004ea15fc542c9c0
003ac57453ace252
006402164c9fdb19
00069b5253875b96
009c0d47eac35d2d
00030b9da3c1bfe7
003a03c1d1d02f29
001d392355df459c
0008484a22a795e4
000be331dd3107ad
0019c7c11da4e4a2
001796e76685e997
009bdc1f78073127
00cce53b2df56140
001dc6931c286db2
00139d946e9d6d82
0072a31cfde71ef6
0040a5db3578d586
00c427156a9e2860
00537869c92a42d0
008cc856e432bc50
00020ccd008ad41a
000f2eb6684284ac
003ed168087f3548
0049de34ffc63ec0
001ca2f34f18cd40
0006229b366fe169
00483f192b06217f
002be31f155ab714
006fd7cb84fd4ad7
0016f0557c6f1b97
00255e081f63ba07
0000bc35faa41240
0005eb45f3e513ac
005e391dd240e89d
0007fa2b9a827fae
005dc0c3e3261cdf
0075583891352145
00926ec5880f9992
000ed19ad19480be
00b0e0c55a4d6238
0046a5661935d9ca
0022f572e6839826
0088b763cb6fb9f0
001da1d095b7c0b4
0062360169143a78
003684bcd9a0f789
000c38d14df6d665
0006391d7049dde8
0039fee368e99380
00a614b2dc1c6980
00acb3ff351198ab
001e5cb35f54fa69
0021ae09901bf552
006255b824338303
00105a5256455ed6
001b8260c83dd73c
004d5ba7b7c6db28
00046247570894a4
0039874c7ffb294c
0042193cc5270058
003a76362613dd95
004f18252739a5ac
0081fa523e38b793
003a82193f6ef346
0097d9725be8876e
000bd4c34161b102
001133b875bed53a
002f08d6e954e096
00bf7b1f10223116
0055333012d9dd23
002525f943737b70
001d3a557cd3a980
008114813c91a610
007a11de14c79e80
0060d84a48824900
004c6c9cdbce1fe5
006e1e405c548974
000b221597f1d3d8
00ac26e207a0a6c5
000575f94a1e493b
004188e0049c9eba
0026c6dd80773e62
000924ce94df0690
0015e2ab5e23c478
002043847b9eedd8
00201bb9ea8ed81c
000c857c28be5198
000481af6ccb653b
0023394341031ac0
0026b598f9022c30
0082a99a5de4c84f
004a9b4a38cf1460
00d9ccf65d9cd7a4
006586f47fc6cf52
009c4964e3f15005
00086bb1a4a4aa7d
0026d8e6dc23319d
00a8fa7b20f1e228
000d8dc90e996e40
009280b83fadd240
007c9128173ea742
00137e71b08ca2aa
001556ddaa385c92
0023700dd18b0e3c
000c0c1389db1c28
00527eec073c111b
003c52c884071124
0001d5530ea52210
00312496ae1c4433
002ee265cbaea1ae
0033509b969e3741
0032c55970ea1358
0039fc6f33cb770b
002f828795a6e6be
0051c2fa15841d7e
00ae5a988393338f
0065c33e4f5a2fc0
0017c3e165050bf0
008e40676e4927e0
0018a07ddc589b2c
0019ca34adee1b3a
001c544f24d1b429
00786666be83b978
007146bfc66e2740
0060801a9a7374c0
0047ed36357ff53c
006928a14a143271
0007d821185844ec
00abd8d1a448644c
0004d8773736490a
003dd8df72e747e1
001fd5838c6c7f50
000920a24b9448d0
001356d94e3c824f
001d1555557808f2
0019eb1c9c94e6a8
000c421f0a303c70
00db8605e2f4aa0e
00208d625a5fd472
0018d5fbe4cda4c8
00825e0ae4d3d5f5
00481234127842a2
00cf2b002b1ad140
0058692f2e100a24
009bfe0fedbf05dc
0006cc51df5a1f44
0017f846e0621293
006ae188a0bc46f0
00680673db489e00
0049fe057966cc00
00321b2c8decc760
00616eb297eddb28
000462d157005089
0097f36052caa668
0001dc3a46d3eb22
0038195731a5d0ae
00188898b9e96d66
00081027f2a79420
0006fb9313a4228e
001820c6ca831f20
001368e07f2e794f
00984973478dc5ac
00c34699db257145
001c635aa6df8398
000a3f26df601552
006e8ea108204593
003bc3c87f8c0454
00bea37cef15e1fa
004a9ca491835636
0088d54339cf6cf1
004661d5224e5470
001b6e4030f71f3d
006fb9a153c78328
006e31309b7b8940
00579189abc15440
00436e1cad683194
006431716b60df88
0006b104399cedbc
00a3f30cb6971d36
00043afa29a5046e
003a28381b02c813
001d66839ef1a1c0
0008b4887801a9fc
0010cafc6dd92ae3
0019e699125f8740
0017bfd098c23630
00056017c15fbdd1
00d6872c5cc11542
001de0f95cf827ae
0013f8dff2fe8408
007a7fe273c35a4c
004588ce32dcf25a
00c48cee7bae850c
0053cfddbdd2f61c
009463624aaca2c6
00052ced44ed58cc
00080f42a7139e80
001b18d762cb44c8
00316c3afcb92ac0
00b2f907a133b2c0
0097de278c5e1226
002a4a823d6d822d
001e79b0a36cdaff
004f56bf7afe673b
0012101a50f4e1fb
00162f7a6e9d784f
0058a12d4900a2fa
00035e3da634fb94
00409bc32bba4e37
003d81e379f6b82a
00448303cfd4dd31
005906717cf6c571
006ad52b4c617cf3
0003d2149d449636
008a5498f0183bb0
00172c91b106b2ed
000573d341f00d72
00489420271c9606
00b2b5098a832538
0042e7af41e9bd7c
0029a7cada9c4cb1
001fcac56f82739c
00921c4279b1a9a8
0082deefe21a73c0
00612f00f6ea6080
00489730c9aa7e6a
006e4f38a8434132
000a266dd02d7453
000708e71fcee988
000737572378fc07
0048c67301dafecb
002db81c4ae88d20
000928d4d1040ed8
0013b66fde55b77c
002062f49da45ab4
001e41e65b7afc35
001a062a307bcabd
0012c1ca7eae79a6
0028782f9453efde
003496095ef45282
0082f69b85b1a2a1
0048724d79b38078
00da31dc2c7fdbce
00619c35508aeaba
00ab36b7c0777858
000d0cb5244ca7fd
"""

raw_values = [int(i, 16) for i in values.split("\n") if i]
final_matrix = [raw_values[i::25] for i in range(25)]



values = """
0019b3240445aa06
006f63394844df78
006df6a4586e71c0
004ea15fc542c9c0
003ac57453ace252
006402164c9fdb19
00069b5253875b96
009c0d47eac35d2d
00030b9da3c1bfe7
003a03c1d1d02f29
001d392355df459c
0008484a22a795e4
000be331dd3107ad
0019c7c11da4e4a2
001796e76685e997
009bdc1f78073127
00cce53b2df56140
001dc6931c286db2
00139d946e9d6d82
0072a31cfde71ef6
0040a5db3578d586
00c427156a9e2860
00537869c92a42d0
008cc856e432bc50
00020ccd008ad41a
000f2eb6684284ac
003ed168087f3548
0049de34ffc63ec0
001ca2f34f18cd40
0006229b366fe169
00483f192b06217f
002be31f155ab714
006fd7cb84fd4ad7
0016f0557c6f1b97
00255e081f63ba07
0000bc35faa41240
0005eb45f3e513ac
005e391dd240e89d
0007fa2b9a827fae
005dc0c3e3261cdf
0075583891352145
00926ec5880f9992
000ed19ad19480be
00b0e0c55a4d6238
0046a5661935d9ca
0022f572e6839826
0088b763cb6fb9f0
001da1d095b7c0b4
0062360169143a78
003684bcd9a0f789
000c38d14df6d665
0006391d7049dde8
0039fee368e99380
00a614b2dc1c6980
00acb3ff351198ab
001e5cb35f54fa69
0021ae09901bf552
006255b824338303
00105a5256455ed6
001b8260c83dd73c
004d5ba7b7c6db28
00046247570894a4
0039874c7ffb294c
0042193cc5270058
003a76362613dd95
004f18252739a5ac
0081fa523e38b793
003a82193f6ef346
0097d9725be8876e
000bd4c34161b102
001133b875bed53a
002f08d6e954e096
00bf7b1f10223116
0055333012d9dd23
002525f943737b70
001d3a557cd3a980
008114813c91a610
007a11de14c79e80
0060d84a48824900
004c6c9cdbce1fe5
006e1e405c548974
000b221597f1d3d8
00ac26e207a0a6c5
000575f94a1e493b
004188e0049c9eba
0026c6dd80773e62
000924ce94df0690
0015e2ab5e23c478
002043847b9eedd8
00201bb9ea8ed81c
000c857c28be5198
000481af6ccb653b
0023394341031ac0
0026b598f9022c30
0082a99a5de4c84f
004a9b4a38cf1460
00d9ccf65d9cd7a4
006586f47fc6cf52
009c4964e3f15005
00086bb1a4a4aa7d
0026d8e6dc23319d
00a8fa7b20f1e228
000d8dc90e996e40
009280b83fadd240
007c9128173ea742
00137e71b08ca2aa
001556ddaa385c92
0023700dd18b0e3c
000c0c1389db1c28
00527eec073c111b
003c52c884071124
0001d5530ea52210
00312496ae1c4433
002ee265cbaea1ae
0033509b969e3741
0032c55970ea1358
0039fc6f33cb770b
002f828795a6e6be
0051c2fa15841d7e
00ae5a988393338f
0065c33e4f5a2fc0
0017c3e165050bf0
008e40676e4927e0
0018a07ddc589b2c
0019ca34adee1b3a
001c544f24d1b429
00786666be83b978
007146bfc66e2740
0060801a9a7374c0
0047ed36357ff53c
006928a14a143271
0007d821185844ec
00abd8d1a448644c
0004d8773736490a
003dd8df72e747e1
001fd5838c6c7f50
000920a24b9448d0
001356d94e3c824f
001d1555557808f2
0019eb1c9c94e6a8
000c421f0a303c70
00db8605e2f4aa0e
00208d625a5fd472
0018d5fbe4cda4c8
00825e0ae4d3d5f5
00481234127842a2
00cf2b002b1ad140
0058692f2e100a24
009bfe0fedbf05dc
0006cc51df5a1f44
0017f846e0621293
006ae188a0bc46f0
00680673db489e00
0049fe057966cc00
00321b2c8decc760
00616eb297eddb28
000462d157005089
0097f36052caa668
0001dc3a46d3eb22
0038195731a5d0ae
00188898b9e96d66
00081027f2a79420
0006fb9313a4228e
001820c6ca831f20
001368e07f2e794f
00984973478dc5ac
00c34699db257145
001c635aa6df8398
000a3f26df601552
006e8ea108204593
003bc3c87f8c0454
00bea37cef15e1fa
004a9ca491835636
0088d54339cf6cf1
004661d5224e5470
001b6e4030f71f3d
006fb9a153c78328
006e31309b7b8940
00579189abc15440
00436e1cad683194
006431716b60df88
0006b104399cedbc
00a3f30cb6971d36
00043afa29a5046e
003a28381b02c813
001d66839ef1a1c0
0008b4887801a9fc
0010cafc6dd92ae3
0019e699125f8740
0017bfd098c23630
00056017c15fbdd1
00d6872c5cc11542
001de0f95cf827ae
0013f8dff2fe8408
007a7fe273c35a4c
004588ce32dcf25a
00c48cee7bae850c
0053cfddbdd2f61c
009463624aaca2c6
00052ced44ed58cc
00080f42a7139e80
001b18d762cb44c8
00316c3afcb92ac0
00b2f907a133b2c0
0097de278c5e1226
002a4a823d6d822d
001e79b0a36cdaff
004f56bf7afe673b
0012101a50f4e1fb
00162f7a6e9d784f
0058a12d4900a2fa
00035e3da634fb94
00409bc32bba4e37
003d81e379f6b82a
00448303cfd4dd31
005906717cf6c571
006ad52b4c617cf3
0003d2149d449636
008a5498f0183bb0
00172c91b106b2ed
000573d341f00d72
00489420271c9606
00b2b5098a832538
0042e7af41e9bd7c
0029a7cada9c4cb1
001fcac56f82739c
00921c4279b1a9a8
0082deefe21a73c0
00612f00f6ea6080
00489730c9aa7e6a
006e4f38a8434132
000a266dd02d7453
000708e71fcee988
000737572378fc07
0048c67301dafecb
002db81c4ae88d20
000928d4d1040ed8
0013b66fde55b77c
002062f49da45ab4
001e41e65b7afc35
001a062a307bcabd
0012c1ca7eae79a6
0028782f9453efde
003496095ef45282
0082f69b85b1a2a1
0048724d79b38078
00da31dc2c7fdbce
00619c35508aeaba
00ab36b7c0777858
000d0cb5244ca7fd
"""

raw_values = [int(i, 16) for i in values.split("\n") if i]
final_matrix = [raw_values[i::25] for i in range(25)]

target = 0xBC42D5779FEC401

s = Solver()
vars = [Int(f"v{i}") for i in range(len(final_matrix))]

for i, lst in enumerate(final_matrix):
    s.add(Or([vars[i] == val for val in lst]))

s.add(Sum(vars) == target)
print(s.check())
m = s.model()
solns = [m[i] for i in vars]

ans = [final_matrix[i].index(solns[i]) for i in range(len(solns))]
print(ans)